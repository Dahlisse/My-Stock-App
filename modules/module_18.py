# module_18.py

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE

# 18.1 Î©îÌä∏Î¶≠ Ï†ïÍ∑úÌôî + Î≥¥Ï†ï Ìï¥ÏÑù
def normalize_metrics(strategy_df):
    strategy_df = strategy_df.copy()
    scaler = MinMaxScaler()
    numeric_cols = ['CAGR', 'Sharpe', 'Calmar', 'MDD', 'Volatility']
    strategy_df[numeric_cols] = scaler.fit_transform(strategy_df[numeric_cols])
    return strategy_df

def interpret_metrics(row):
    interp = []
    if row['Sharpe'] < 0.3:
        interp.append("SharpeÍ∞Ä ÎÇÆÏùÄ Ïù¥Ïú†Îäî Î≥ÄÎèôÏÑ± Î∂ÑÎ™®Í∞Ä ÌÅ¨Í∏∞ ÎïåÎ¨∏ÏûÖÎãàÎã§.")
    if row['CAGR'] > 0.7:
        interp.append("ÏµúÍ∑º 3ÎÖÑ ÌèâÍ∑† ÏàòÏùµÎ•†Ïù¥ Îß§Ïö∞ ÎÜíÏäµÎãàÎã§.")
    if abs(row['MDD']) > 0.6:
        interp.append("ÏµúÎåÄ ÎÇôÌè≠Ïù¥ ÌÅ∞ Í≥†ÏúÑÌóò Ï†ÑÎûµÏûÖÎãàÎã§.")
    return ' / '.join(interp)

# 18.2 Ï†ÑÎûµ Í∞Ñ ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ ÌûàÌä∏Îßµ
def plot_strategy_correlation(strategy_returns):
    if strategy_returns.empty:
        print("‚ùó Ï†ÑÎûµ ÏàòÏùµÎ•† Îç∞Ïù¥ÌÑ∞Í∞Ä ÎπÑÏñ¥ ÏûàÏäµÎãàÎã§.")
        return pd.DataFrame()
    corr = strategy_returns.corr()
    plt.figure(figsize=(6, 5))
    sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f")
    plt.title("Ï†ÑÎûµ Í∞Ñ ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ ÌûàÌä∏Îßµ")
    plt.tight_layout()
    plt.show()
    return corr

# 18.2 Í≥†Ï∞®Ïõê ÏãúÍ∞ÅÌôî (PCA/t-SNE)
def visualize_strategy_space(strategy_df, method='pca'):
    features = strategy_df[['CAGR', 'Sharpe', 'Calmar', 'MDD', 'Volatility']].values
    if method == 'pca':
        reducer = PCA(n_components=2)
    else:
        reducer = TSNE(n_components=2, perplexity=5, n_iter=500, random_state=42)
    reduced = reducer.fit_transform(features)
    result = pd.DataFrame(reduced, columns=['X', 'Y'], index=strategy_df.index)

    plt.figure(figsize=(6, 5))
    sns.scatterplot(data=result, x='X', y='Y', hue=strategy_df.index, s=100)
    plt.title(f"Ï†ÑÎûµ Íµ∞ ÏãúÍ∞ÅÌôî ({method.upper()})")
    plt.tight_layout()
    plt.show()

    return result

# 18.3 Ìä∏Î†àÏù¥ÎìúÏò§ÌîÑ Î∂ÑÏÑù
def tradeoff_analysis(strategy_df):
    plt.figure(figsize=(7, 5))
    sns.scatterplot(
        x='Volatility', y='CAGR', hue=strategy_df.index,
        size='Sharpe', sizes=(50, 200), data=strategy_df
    )
    plt.title("ÏàòÏùµÎ•† vs ÏïàÏ†ïÏÑ± Ìä∏Î†àÏù¥ÎìúÏò§ÌîÑ (ÌååÎ†àÌÜ† ÌîÑÎ°†Ìã∞Ïñ¥)")
    plt.xlabel("Î≥ÄÎèôÏÑ± (ÎÇÆÏùÑÏàòÎ°ù ÏïàÏ†ï)")
    plt.ylabel("Ïó∞ ÏàòÏùµÎ•† (CAGR)")
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    # ÌååÎ†àÌÜ† Ïö∞ÏúÑ Ï∂îÏ†ï
    pareto_front = []
    for i, row in strategy_df.iterrows():
        dominated = False
        for j, other in strategy_df.iterrows():
            if i == j:
                continue
            if (other['CAGR'] >= row['CAGR']) and (other['Volatility'] <= row['Volatility']):
                dominated = True
                break
        if not dominated:
            pareto_front.append(i)

    return pareto_front

# Ï†ÑÏ≤¥ Ïã§Ìñâ
def run_metric_comparator(strategy_df, returns_df):
    strategy_df = normalize_metrics(strategy_df)
    strategy_df['ÏÑ§Î™Ö'] = strategy_df.apply(interpret_metrics, axis=1)

    correlation = plot_strategy_correlation(returns_df)
    tsne_coords = visualize_strategy_space(strategy_df, method='tsne')
    pareto_front = tradeoff_analysis(strategy_df)

    return {
        'normalized_df': strategy_df,
        'correlation': correlation,
        'tsne_coords': tsne_coords,
        'pareto_front': pareto_front
    }
    
import streamlit as st
import datetime

def run():
    st.subheader("üìò 18. Ïã§Ìñâ ÏûêÎèôÌôî ÏãúÏä§ÌÖú")
    st.markdown("‚ÄúÏ†ÑÎûµÏùÑ ÏÑ§Í≥ÑÌïòÎäî Í≤ÉÎßåÏúºÎ°úÎäî Î∂ÄÏ°±Ìï©ÎãàÎã§. Ïã§ÌñâÍπåÏßÄ Ïù¥Ïñ¥Ï†∏Ïïº Ìï©ÎãàÎã§.‚Äù")

    st.markdown("### ‚úÖ 18.1 Ï†ÑÎûµ Ïã§Ìñâ ÌîåÎ°úÏö∞ ÏûêÎèôÌôî")
    st.markdown("""
    - Ï†ÑÎûµ ÏÑ§Í≥Ñ ‚Üí Ïã§Ìñâ ÏãúÎÆ¨Î†àÏù¥ÏÖò ‚Üí Ïã§ÏãúÍ∞Ñ ÏÑ±Í≥º Ï∂îÏ†Å ‚Üí Ï†ÑÎûµ ÍµêÏ≤¥ Ïó¨Î∂Ä ÌåêÎã® ‚Üí ÏÇ¨Ïö©Ïûê ÌñâÎèô Í∞ÄÏù¥Îìú
    - ÏûêÎèôÌôîÎêú Ï†ÑÎûµ Ïã§Ìñâ ÌùêÎ¶ÑÏúºÎ°ú Ìà¨Ïûê Ïù¥ÌÉà ÏµúÏÜåÌôî
    """)

    # ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏãúÍ∞ÑÎåÄ ÏÑ†ÌÉù
    start_date = st.date_input("Ï†ÑÎûµ Ïã§Ìñâ ÏãúÏûëÏùº", datetime.date.today() - datetime.timedelta(days=30))
    end_date = st.date_input("Ï†ÑÎûµ Ï¢ÖÎ£åÏùº", datetime.date.today())

    st.success(f"ÏÑ†ÌÉùÎêú Ï†ÑÎûµ Ïã§Ìñâ Í∏∞Í∞Ñ: {start_date} ~ {end_date}")

    st.markdown("### ‚úÖ 18.2 Ï†ÑÎûµ Ïû¨ÏßÑÏûÖ ÏãúÏ†ê ÏûêÎèô Í∞êÏßÄ")
    reentry_threshold = st.slider("Ï†ÑÎûµ Î≥µÍ∑Ä Í∏∞Ï§Ä ÏàòÏùµÎ•† (% ÌïòÎùΩ Ïãú)", 1, 20, 7)
    st.info(f"üìâ Ï†ÑÎûµ ÏàòÏùµÎ•†Ïù¥ {reentry_threshold}% Ïù¥ÏÉÅ ÌïòÎùΩÌïòÎ©¥ Ïû¨ÏßÑÏûÖ Í∞ÄÏù¥ÎìúÍ∞Ä ÌëúÏãúÎê©ÎãàÎã§.")

    st.markdown("### ‚úÖ 18.3 Ïã§Ìñâ ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖò ÏòàÏãú")
    st.markdown("""
    - ÌòÑÏû¨ Ï†ÑÎûµÏù¥ Ïû†Ïãú Ïù¥ÌÉà Íµ¨Í∞ÑÏóê ÏûàÏäµÎãàÎã§.
    - **Ï∂îÏ≤ú ÌñâÎèô:** Îß§ÎèÑ Î≥¥Î•ò / ÌòÑÍ∏à ÎπÑÏ§ë ÌôïÎåÄ
    - **ÏòàÏÉÅ Î≥µÍ∑Ä ÏãúÏ†ê:** ÏïΩ 2Ï£º ÌõÑ ÏòàÏÉÅ
    """)

    st.markdown("### ‚úÖ 18.4 ÌñâÎèô Ïù¥ÌÉà Î∞©ÏßÄ Í∏∞Îä•")
    st.markdown("""
    - Î™©Ìëú ÏàòÏùµÎ•† ÎèÑÎã¨ Ïãú ÏïåÎ¶º ‚Üí **‚ÄúÏßÄÍ∏à ÏàòÏùµ Ïã§ÌòÑ ÌÉÄÏù¥Î∞çÏûÖÎãàÎã§‚Äù**
    - ÏÜêÏã§ Ïª§Ïßà Ïãú ÏûêÎèô Í≤ΩÍ≥† ‚Üí **‚ÄúÏßÄÍ∏àÏùÄ ÌñâÎèô ÏûêÏ†ú. Î≥ÄÎèôÏÑ± ÎÜíÏäµÎãàÎã§‚Äù**
    - Î¶¨Î∞∏Îü∞Ïã± Ï°∞Í±¥ Ï∂©Ï°± Ïãú ÏûêÎèô ÌåùÏóÖ ‚Üí **‚ÄúÎ∂ÄÎ∂Ñ Î¶¨Î∞∏Îü∞Ïã± Í∂åÏû•Îê©ÎãàÎã§‚Äù**
    """)

    st.markdown("### ‚úÖ 18.5 ÏûêÎèôÌôî Ïã§Ìñâ Ï°∞Í±¥ ÏÑ§Ï†ï")
    realtime = st.checkbox("üì° Ïã§ÏãúÍ∞Ñ Ï∂îÏ†Å ÌôúÏÑ±Ìôî", value=True)
    tts = st.checkbox("üîä ÏùåÏÑ± Í∞ÄÏù¥Îìú ÌôúÏÑ±Ìôî (TTS)", value=False)

    if realtime:
        st.success("üîÑ Ïã§ÏãúÍ∞Ñ Ï†ÑÎûµ Ï∂îÏ†ÅÏù¥ ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§.")
    if tts:
        st.warning("üîä ÏùåÏÑ± Í∞ÄÏù¥ÎìúÎäî Safari Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Ï†úÌïúÎê† Ïàò ÏûàÏäµÎãàÎã§.")

    st.markdown("---")
    st.caption("‚Äª Î≥∏ Í∏∞Îä•ÏùÄ module_09(Ïã§ÏãúÍ∞Ñ Ï∂îÏ†Å), module_10(ÏùåÏÑ± ÏïàÎÇ¥), module_24(ÏÇ¨Ïö©Ïûê ÏÑ±Ìñ•)Ïóê Ïó∞Í≤∞Îê©ÎãàÎã§.")